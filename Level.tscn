[gd_scene load_steps=6 format=2]

[ext_resource path="res://assets/CursorFrame.png" type="Texture" id=1]
[ext_resource path="res://assets/Elems.png" type="Texture" id=2]
[ext_resource path="res://assets/Pause.png" type="Texture" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

const tile_size = 20

var tile_matrix_size = Util.Size.new(50, 45)
var matrix
var clickLockCount = 10
var inventory = Inventory.new()

# =========================
# Godot handlers
# =========================
func _physics_process(delta):
	Cursors.cursor_show_frame(self)
	# Mouse buttons
	# ------------------
	if clickLockCount < 1:
		if Input.is_mouse_button_pressed(1):
			var tpos = Cursors.cursor_tile_pos(self)
			_put_elem(tpos.x, tpos.y)
		elif Input.is_mouse_button_pressed(2):
			var tpos = Cursors.cursor_tile_pos(self)
			_clear_elem(tpos.x, tpos.y)
	# Keyboard keys
	# ------------------
	if Input.is_key_pressed(KEY_1):
		_timing_speed(1)
	elif Input.is_key_pressed(KEY_2):
		_timing_speed(2)
	elif Input.is_key_pressed(KEY_3):
		_timing_speed(3)
	elif Input.is_key_pressed(KEY_DELETE): # Clear matrix
		matrix.clear()
		_draw_matrix()
		

func _ready():
	inventory.show_curr_item_elem(self)
	_timing_speed(2)
	var doNewMatrix = true
	
	# Load matrix
	# --------------
	if G.loaded_matrix_path != null:
		var lmatrix = G.readFileAsObject(G.loaded_matrix_path)
		if lmatrix == null:
			doNewMatrix = true
		elif not (lmatrix.has(\"width\") and lmatrix.has(\"height\") and lmatrix.has(\"data\") and lmatrix.has(\"tick_count\")):
			doNewMatrix = true
			return
		else:
			var w = lmatrix['width']
			var h = lmatrix['height']
			var d = lmatrix['data']
			_tick_count = lmatrix['tick_count']
			matrix = Matrix.new(w, h)
			matrix.matrix = d
			doNewMatrix = false
	if doNewMatrix:
		matrix = Matrix.new(tile_matrix_size.width, tile_matrix_size.height)
	_draw_matrix()

# =========================
# Set / Get elem on matrix
# =========================
func _put_elem(x, y):
	var elem = inventory.item_get()
	matrix.set_val(x, y, elem)
	_draw_matrix()
	
func _clear_elem(x, y):
	matrix.set_val(x, y, 0)
	_draw_matrix()
	
# =========================
# Input events handler
# =========================
func _input(event):
	if event is InputEventKey and event.pressed:
		if event.scancode == KEY_SPACE:
			__updater_toggle_paused()
		elif event.scancode == KEY_ESCAPE:
			save_matrix()
			get_tree().change_scene(\"res://Select.tscn\")
	if event is InputEventMouseButton and event.pressed:
		if event.button_index == 4: # SCROLL UP
			inventory.item_prev()
			inventory.show_curr_item_elem(self)
		elif event.button_index == 5: # SCROLL DOWN
			inventory.item_next()
			inventory.show_curr_item_elem(self)

# =========================
# Graphics util functions
# =========================
func _draw_matrix():
	for y in range(matrix.height):
		for x in range(matrix.width):
			var elem = Sprites.number_of(matrix.get_val(x, y)) - 1
			$TileMap.set_cell(x, y, elem)

# =========================
# Matrix logic updater
# =========================
var future_matrix_ops = [] # Util.Op[]
var updater_paused = false
var _tick_count = 0
var _tick_max_count = 5

func updateTheMatrix():
	if clickLockCount > 0:
		clickLockCount -= 1
	if updater_paused: return
	# --------------------
	# Tick updater
	# --------------------
	if _tick_count == 0:
		_on_tick()
	_tick_count += 1
	if _tick_count > _tick_max_count:
		_tick_count = 0
	# --------------------
	for y in range(matrix.height):
		for x in range(matrix.width):
			var el = matrix.get_val(x, y)
			if _is_ticking_elem(el):
				_ticks_set_pos([x, y])
			if el == Matrix.EL_WIRE:
				var nwired = __matrix_check_wired(x, y)
				if nwired != 0 and (nwired == 1 or nwired == 2):
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_set_activated\", [x, y]))
			elif el == Matrix.EL_WIRE_ACTIVATED:
				future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_set_tail\", [x, y]))
			elif el == Matrix.EL_WIRE_TAIL:
				future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_set_tail_low\", [x, y]))
			elif el == Matrix.EL_WIRE_TAIL_LOW:
				future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_set_wire\", [x, y]))
			elif el == Matrix.EL_WIRE_GUN:
				if __matrix_check_wire_active(x-1, y):
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_empty_set\", [x+1, y, matrix.EL_WIRE_BULLET_RIGHT]))
				elif __matrix_check_wire_active(x+1, y):
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_empty_set\", [x-1, y, matrix.EL_WIRE_BULLET_LEFT]))
				if __matrix_check_wire_active(x, y-1):
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_empty_set\", [x, y + 1, matrix.EL_WIRE_BULLET_DOWN]))
				if __matrix_check_wire_active(x, y+1):
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_empty_set\", [x, y - 1, matrix.EL_WIRE_BULLET_UP]))
			elif el == Matrix.EL_WIRE_BULLET_UP:
				future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_set_bullet\", [x, y, Matrix.EL_WIRE_BULLET_UP, x, y-1]))
			elif el == Matrix.EL_WIRE_BULLET_DOWN:
				future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_set_bullet\", [x, y, Matrix.EL_WIRE_BULLET_DOWN, x, y+1]))
			elif el == Matrix.EL_WIRE_BULLET_LEFT:
				future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_set_bullet\", [x, y, Matrix.EL_WIRE_BULLET_LEFT, x-1, y]))
			elif el == Matrix.EL_WIRE_BULLET_RIGHT:
				future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_set_bullet\", [x, y, Matrix.EL_WIRE_BULLET_RIGHT, x+1, y]))
			elif el == Matrix.EL_WIRE_BLOCKER:
				if __matrix_check_wired_horizontal(x, y):
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_toggle_blocker_block\", [x, y - 1]))
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_toggle_blocker_block\", [x, y + 1]))
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_set_activated\", [x-1, y]))
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_set_activated\", [x+1, y]))
				elif __matrix_check_wired_vertical(x, y):
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_toggle_blocker_block\", [x - 1, y]))
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_toggle_blocker_block\", [x + 1, y]))
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_set_activated\", [x, y-1]))
					future_matrix_ops.append(Util.Op.new(self, \"__update_matrix_set_activated\", [x, y+1]))
	for op in future_matrix_ops:
		op.call_op()
	if future_matrix_ops.size() > 0:
		_draw_matrix()
	future_matrix_ops.clear()

func __matrix_check_wire_active(x, y):
	var el = matrix.get_val(x, y)
	return el in [Matrix.EL_WIRE_ACTIVATED]

func __matrix_check_wired(x, y):
	var cnt = 0
	for pos in [[x+1, y], [x-1, y], [x, y+1], [x, y-1], [x+1, y-1], [x-1, y-1], [x-1, y+1], [x+1, y+1]]:
		if __matrix_check_wire_active(pos[0], pos[1]):
			cnt += 1
	return cnt

func __matrix_check_wired_horizontal(x, y):
	for pos in [[x+1, y], [x-1, y]]:
		if __matrix_check_wire_active(pos[0], pos[1]):
			return true
	return false

func __matrix_check_wired_vertical(x, y):
	for pos in [[x, y+1], [x, y-1]]:
		if __matrix_check_wire_active(pos[0], pos[1]):
			return true
	return false

func __matrix_check_bullet(x, y):
	return matrix.get_val(x, y) in [
		Matrix.EL_WIRE_BULLET_LEFT, Matrix.EL_WIRE_BULLET_RIGHT,
		Matrix.EL_WIRE_BULLET_UP, Matrix.EL_WIRE_BULLET_DOWN
	]

func __update_matrix_set_activated(x, y):
	var el = matrix.get_val(x, y)
	if el == Matrix.EL_WIRE:
		matrix.set_val(x, y, Matrix.EL_WIRE_ACTIVATED)

func __update_matrix_set_tail(x, y):
	var el = matrix.get_val(x, y)
	if el == Matrix.EL_WIRE_ACTIVATED:
		matrix.set_val(x, y, Matrix.EL_WIRE_TAIL)

func __update_matrix_set_wire(x, y):
	var el = matrix.get_val(x, y)
	if el == Matrix.EL_WIRE_TAIL_LOW:
		matrix.set_val(x, y, Matrix.EL_WIRE)

func __update_matrix_set_tail_low(x, y):
	var el = matrix.get_val(x, y)
	if el == Matrix.EL_WIRE_TAIL:
		matrix.set_val(x, y, Matrix.EL_WIRE_TAIL_LOW)

func __update_matrix_empty_set(x, y, elem):
	var el = matrix.get_val(x, y)
	if el == 0:
		matrix.set_val(x, y, elem)

func __update_matrix_delete(x, y):
	var el = matrix.get_val(x, y)
	matrix.set_val(x, y, 0)

func __update_matrix_toggle_blocker_block(x, y):
	var el = matrix.get_val(x, y)
	if el == 0:
		matrix.set_val(x, y, Matrix.EL_WIRE_BLOCKER_BLOCK)
	elif el == Matrix.EL_WIRE_BLOCKER_BLOCK:
		matrix.set_val(x, y, 0)

func __update_matrix_set_bullet(bulX, bulY, bulID, targetX, targetY):
	if __matrix_check_bullet(targetX, targetY):
		matrix.set_val(targetX, targetY, 0)
		matrix.set_val(bulX, bulY, 0)
		return
	var el = matrix.get_val(targetX, targetY)
	if el == Matrix.EL_WIRE:
		__update_matrix_set_activated(targetX, targetY)
	elif el == 0:
		matrix.set_val(targetX, targetY, bulID)
	matrix.set_val(bulX, bulY, 0)

func __updater_toggle_paused():
	updater_paused = !updater_paused
	$PausedSign.visible = updater_paused

# ===========================
# Additional timers
# ===========================
func _on_save_level():
	# Auto save the matrix
	save_matrix()
	pass

# =============================
# Matrix additional functions
# =============================
func save_matrix():
	if G.loaded_matrix_path == null:
		G.loaded_matrix_path = \"user://current\"
	var data = {}
	data['width'] = matrix.width
	data['height'] = matrix.height
	data['data'] = matrix.matrix
	data['tick_count'] = _tick_count
	G.writeFileAsObject(G.loaded_matrix_path, data)

# =============================
# Ticks
# =============================
var tick_elem_poses = {} # key: [x, y]    val: int element
var ticks = 0

func _ticks_set_pos(pos):
	tick_elem_poses[pos] = true

func _timing_execute_ops():
	if len(tick_elem_poses) > 0:
		for pos in tick_elem_poses.keys():
			__tick_elem(pos[0], pos[1])
		tick_elem_poses.clear()

func _is_ticking_elem(elem):
	if elem in [Matrix.EL_WIRE_BUTTERY]:
		return true
	return false

func _timing_speed(n: int):
	$Timer.wait_time = 1 / float(pow(5, n))

func _on_tick():
	ticks += 1
	_timing_execute_ops()
	if ticks % 20 == 0:
		_on_save_level()

func __tick_elem(x, y):
	for p in Positions.neighbour_positions8(x, y):
		__update_matrix_set_activated(p[0], p[1])
"

[sub_resource type="TileSet" id=2]
0/name = "Elems.png 0"
0/texture = ExtResource( 2 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 0, 0, 5, 5 )
0/tile_mode = 0
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape_one_way = false
0/shape_one_way_margin = 0.0
0/shapes = [  ]
0/z_index = 0
1/name = "Elems.png 1"
1/texture = ExtResource( 2 )
1/tex_offset = Vector2( 0, 0 )
1/modulate = Color( 1, 1, 1, 1 )
1/region = Rect2( 5, 0, 5, 5 )
1/tile_mode = 0
1/occluder_offset = Vector2( 0, 0 )
1/navigation_offset = Vector2( 0, 0 )
1/shape_offset = Vector2( 0, 0 )
1/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
1/shape_one_way = false
1/shape_one_way_margin = 0.0
1/shapes = [  ]
1/z_index = 0
2/name = "Elems.png 2"
2/texture = ExtResource( 2 )
2/tex_offset = Vector2( 0, 0 )
2/modulate = Color( 1, 1, 1, 1 )
2/region = Rect2( 10, 0, 5, 5 )
2/tile_mode = 0
2/occluder_offset = Vector2( 0, 0 )
2/navigation_offset = Vector2( 0, 0 )
2/shape_offset = Vector2( 0, 0 )
2/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
2/shape_one_way = false
2/shape_one_way_margin = 0.0
2/shapes = [  ]
2/z_index = 0
3/name = "Elems.png 3"
3/texture = ExtResource( 2 )
3/tex_offset = Vector2( 0, 0 )
3/modulate = Color( 1, 1, 1, 1 )
3/region = Rect2( 0, 5, 5, 5 )
3/tile_mode = 0
3/occluder_offset = Vector2( 0, 0 )
3/navigation_offset = Vector2( 0, 0 )
3/shape_offset = Vector2( 0, 0 )
3/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
3/shape_one_way = false
3/shape_one_way_margin = 0.0
3/shapes = [  ]
3/z_index = 0
4/name = "Elems.png 4"
4/texture = ExtResource( 2 )
4/tex_offset = Vector2( 0, 0 )
4/modulate = Color( 1, 1, 1, 1 )
4/region = Rect2( 5, 5, 5, 5 )
4/tile_mode = 0
4/occluder_offset = Vector2( 0, 0 )
4/navigation_offset = Vector2( 0, 0 )
4/shape_offset = Vector2( 0, 0 )
4/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
4/shape_one_way = false
4/shape_one_way_margin = 0.0
4/shapes = [  ]
4/z_index = 0
5/name = "Elems.png 5"
5/texture = ExtResource( 2 )
5/tex_offset = Vector2( 0, 0 )
5/modulate = Color( 1, 1, 1, 1 )
5/region = Rect2( 10, 5, 5, 5 )
5/tile_mode = 0
5/occluder_offset = Vector2( 0, 0 )
5/navigation_offset = Vector2( 0, 0 )
5/shape_offset = Vector2( 0, 0 )
5/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
5/shape_one_way = false
5/shape_one_way_margin = 0.0
5/shapes = [  ]
5/z_index = 0
6/name = "Elems.png 6"
6/texture = ExtResource( 2 )
6/tex_offset = Vector2( 0, 0 )
6/modulate = Color( 1, 1, 1, 1 )
6/region = Rect2( 0, 10, 5, 5 )
6/tile_mode = 0
6/occluder_offset = Vector2( 0, 0 )
6/navigation_offset = Vector2( 0, 0 )
6/shape_offset = Vector2( 0, 0 )
6/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
6/shape_one_way = false
6/shape_one_way_margin = 0.0
6/shapes = [  ]
6/z_index = 0
7/name = "Elems.png 7"
7/texture = ExtResource( 2 )
7/tex_offset = Vector2( 0, 0 )
7/modulate = Color( 1, 1, 1, 1 )
7/region = Rect2( 5, 10, 5, 5 )
7/tile_mode = 0
7/occluder_offset = Vector2( 0, 0 )
7/navigation_offset = Vector2( 0, 0 )
7/shape_offset = Vector2( 0, 0 )
7/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
7/shape_one_way = false
7/shape_one_way_margin = 0.0
7/shapes = [  ]
7/z_index = 0

[node name="Level" type="Node2D"]
script = SubResource( 1 )

[node name="TileMap" type="TileMap" parent="."]
scale = Vector2( 4, 4 )
tile_set = SubResource( 2 )
cell_size = Vector2( 5, 5 )
format = 1

[node name="CursorFrame" type="Sprite" parent="."]
scale = Vector2( 2, 2 )
texture = ExtResource( 1 )
centered = false

[node name="Timer" type="Timer" parent="."]
wait_time = 0.05
autostart = true

[node name="PausedSign" type="Sprite" parent="."]
visible = false
modulate = Color( 1, 1, 1, 0.0823529 )
position = Vector2( 535.405, 339.169 )
scale = Vector2( 41.5866, 36.238 )
texture = ExtResource( 3 )
[connection signal="timeout" from="Timer" to="." method="updateTheMatrix"]
